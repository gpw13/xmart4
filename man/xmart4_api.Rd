% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get.R
\name{xmart4_api}
\alias{xmart4_api}
\title{Access the xMart4 API}
\usage{
xmart4_api(
  mart,
  table = NULL,
  xmart_server = c("UAT", "PROD"),
  top = NULL,
  query = NULL,
  format = c("none", "csv", "streaming"),
  full_table = TRUE,
  auth_type = "client",
  token = NULL
)
}
\arguments{
\item{mart}{Name of the xMart4 mart}

\item{table}{Name of a table within the mart, otherwise \code{NULL} (the default)}

\item{xmart_server}{Either 'UAT' (the default) or 'PROD'}

\item{top}{Number of rows of a table to return}

\item{query}{A single string fitting the \href{https://www.odata.org/documentation/odata-version-2-0/uri-conventions/}{Odata protocol}
that must start with \code{"$filter="}.}

\item{format}{Specification of the output format to be returned by the xMart API.
Defaults to \code{"none"}, but consider switching to \code{"csv"} if you are having
loading an extremely large table. See the
\href{https://portal-uat.who.int/xmart4/docs/xmart_api/use_API.html}{xMart4 API documentation}
for details on the three options.}

\item{full_table}{Logical, whether or not to load all the rows in a specified table,
defaults to \code{TRUE}. If no format is provided, the xMart4 API limits calls to 100,000 rows at a time, so
if \code{full_table == TRUE}, the function automatically repeats the API call to
extract all rows within the xMart4 table. Ignored if \code{format="streaming"} or
\code{format="csv"}.}

\item{auth_type}{Type of authorization to use for the token authorization.
If "client" (the default), it uses an AzureAD client setup. The old "wims"
method has been discontinued.}

\item{token}{Access token for xMart4 server. If NULL (the default), the package automatically creates and manages access for the user if Azure client ID and secret set up properly. See \code{vignette("token_setup")} for instructions and details.}
}
\value{
A data frame.
}
\description{
Function that provides access to the xMart4 API. Currently functionality is
limited to accessing lists of tables within marts and the data within them,
but additional functionality can be built-in as requested.
}
